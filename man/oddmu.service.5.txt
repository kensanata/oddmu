ODDMU.SERVICE(5)

# NAME

oddmu.service - how to setup Oddmu using systemd

## DESCRIPTION

Here's how to setup a wiki using systemd such that it starts automatically when
the system boots and gets restarted automatically when it crashes.

First, create a new user called "oddmu" with it's own home directory but without
a login.

```
adduser --system --home /home/oddmu oddmu
```

The directory "/home/oddmu" contains the templates and all the data files. Copy
all the templates files ending in ".html" from the source distribution to
"/home/oddmu".

If you want to keep everything in one place, copy the binary "oddmu" and the
service file "oddmu.service" to "/home/oddmu", too.

Edit the "oddmu.service" file. These are the lines you most likely have to take
care of:

```
ExecStart=/home/oddmu/oddmu
WorkingDirectory=/home/oddmu
ReadWritePaths=/home/oddmu
Environment="ODDMU_PORT=8080"
Environment="ODDMU_WEBFINGER=1"
```

Install the service file and enable it:

```
sudo systemctl enable --now ./oddmu.service
```

You should be able to visit the wiki at http://localhost:8080/.

Check the log:

```
journalctl --unit oddmu
```

Follow the log:

```
journalctl --follow --unit oddmu
```

# Socket Activation

Alternatively, you can let systemd handle the creation of the listening socket,
passing it to Oddmu. See "oddmu-unix-domain.service" and
"oddmu-unix-domain.socket" for a fully worked example of how to do this with a
Unix domain socket. Take note of "Accept=no" in the .socket file and
"StandardInput=socket" in the .service file. The option "StandardInput=socket"
tells systemd to pass the socket to the service as its standard input.
"Accept=no" tells systemd to pass a listening socket, rather than to try calling
Oddmu for each connection.

Instead of using "oddmu.service", you need to use "oddmu-unix-domain.socket" and
"oddmu-unix-domain.service".

The unit file for the socket defines a file name. You probably need to create
the directory or change the file name.

```
sudo mkdir /run/oddmu
```

The unit file for the service defines where the Oddmu binary is and where the
data directory is. These are the lines you most likely have to take care of:

```
ExecStart=/home/oddmu/oddmu
WorkingDirectory=/home/oddmu
ReadWritePaths=/home/oddmu
Environment="ODDMU_PORT=8080"
Environment="ODDMU_WEBFINGER=1"
```

To install, enable and start both units:

```
sudo systemctl enable --now ./oddmu-unix-domain.socket
sudo systemctl enable --now ./oddmu-unix-domain.service
```

To test just the unix domain socket, use _ncat(1)_:

```
echo -e "GET /view/index HTTP/1.1\r\nHost: localhost\r\n\r\n" \
  | ncat --unixsock /run/oddmu/oddmu.sock
```

Now you need to set up your web browser to use the Unix domain socket. See
_oddmu-apache_(5) or _oddmu-nginx_(5) for example configurations.

## A personal wiki

On a single user machine, it might be useful to have a single wiki for the main
user available. In order to do this, setup a "user" unit using systemd and save
the following as "user-unix-domain.service":

```
[Unit]
Description=Oddmu
After=network.target
[Install]
WantedBy=default.target
[Service]
Type=simple
Restart=always
StandardOutput=journal
StandardError=journal
ExecStart=/home/alex/src/oddmu/oddmu
WorkingDirectory=/home/alex/wiki
Environment="ODDMU_LANGUAGES=de,en"
```

Make sure to change the "ExecStart" entry so that it points to your copy of the
Oddmu binary.

Since this is a user service, the same user can edit the files using their
favourite text editor.

Install it:

```
systemctl --user enable --now ./user-unix-domain.service
```

To examine the log:

```
journalctl --user --unit user-unix-domain.service
```

Note that no sudo is required!

## Using the priviledged port 80

When running a personal wiki, you can have the oddmu binary listen on port 80,
the standard HTTP port. It is not really worth the effort: It means that you can
visit "http://localhost/" instead of "http://localhost:8080". Nevertheless, if
you're interested in giving it a try, here's how to do it.

The service definition must specify the new port:

Environment="ODDMU_PORT=80"

Since this is a privileged port, the binary needs an extra capability for an
ordinary user to do this.

```
sudo setcap 'cap_net_bind_service=+ep' oddmu
```

Note that as soon as you recompile, the capability is gone again and the above
must be repeated.

# SECURITY

Only allow direct access to Oddmu on systems and networks where you're OK with
every user editing the pages. On the open web, this is not true. If your server
is on the open web, always run Oddmu behind a regular web server acting as a
reverse proxy, limiting regular visitors to read-only access. This means that
the regular web server listens on the regular privileged ports (80 for HTTP,
443 for HTTPS) and passes requests to Oddmu on some other port.

# SEE ALSO

_oddmu_(1), _oddmu-apache_(5), _oddmu-nginx_(5), _systemd.exec_(5),
_systemd.socket_(5), _capabilities_(7)

# AUTHORS

Maintained by Alex Schroeder <alex@gnu.org>.
