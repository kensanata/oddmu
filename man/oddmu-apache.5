.\" Generated by scdoc 1.11.2
.\" Complete documentation for this program is not available as a GNU info page
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.nh
.ad l
.\" Begin generated content:
.TH "ODDMU-APACHE" "5" "2023-10-09"
.PP
.SH NAME
.PP
oddmu-apache - how to setup Apache as a reverse proxy for Oddmu
.PP
.SS DESCRIPTION
.PP
The oddmu program serves the current working directory as a wiki on port 8080.\&
This is an unpriviledged port so an ordinary use account can do this.\&
.PP
The best way to protect the wiki against vandalism and spam is to use a regular
web server as reverse proxy.\& This page explains how to setup Apache on Debian to
do this.\&
.PP
.SS CONFIGURATION
.PP
HTTPS is not part of the wiki.\& You probably want to configure this in your
webserver.\& I guess you could use stunnel, too.\& If you'\&re using Apache, you can
use "mod_md" to manage your domain.\&
.PP
In the example below, the site is configured in a file called
"/etc/apache2/sites-available/500-transjovian.\&conf" and a link poins there from
"/etc/apache2/sites-enabled".\& Create this link using \fIa2ensite\fR(1).\&
.PP
.nf
.RS 4
MDomain transjovian\&.org
MDCertificateAgreement accepted

<VirtualHost *:80>
    ServerName transjovian\&.org
    RewriteEngine on
    RewriteRule ^/(\&.*) https://%{HTTP_HOST}/$1 [redirect]
</VirtualHost>
<VirtualHost *:443>
    ServerAdmin alex@alexschroeder\&.ch
    ServerName transjovian\&.org
    SSLEngine on
    ProxyPassMatch "^/((view|edit|save|add|append|upload|drop|search)/(\&.*))?$" "http://localhost:8080/$1"
</VirtualHost>
.fi
.RE
.PP
First, it manages the domain, getting the necessary certificates.\& It redirects
regular HTTP traffic from port 80 to port 443.\& It turns on the SSL engine for
port 443.\& It proxies the requests for the wiki to port 8080.\&
.PP
Thus, this is what happens:
.PP
\fB The user tells the browser to visit `transjovian.\&org`
\fR The browser sends a request for `http://transjovian.\&org` (on port 80)
\fB Apache redirects this to `https://transjovian.\&org/` by default (now on port 443)
\fR This is proxied to `http://transjovian.\&org:8080/` (no encryption, on port 8080)
.PP
Restart the server, gracefully:
.PP
.nf
.RS 4
apachectl graceful
.fi
.RE
.PP
To serve both HTTP and HTTPS, don'\&t redirect from the first virtual host to the
second â€“ instead just proxy to the wiki like you did for the second virtual
host: use a copy of the "ProxyPassMatch" directive instead of "RewriteEngine on"
and "RewriteRule".\&
.PP
.SS Access
.PP
Access control is not part of the wiki.\& By default, the wiki is editable by all.\&
This is most likely not what you want unless you'\&re running it stand-alone,
unconnected to the Internet.\&
.PP
Create a new password file called ".\&htpasswd" and add the user "alex":
.PP
.nf
.RS 4
cd /home/oddmu
htpasswd -c \&.htpasswd alex
.fi
.RE
.PP
To add more users, don'\&t use the "-c" option or you will overwrite it!\&
.PP
To add another user:
.PP
.nf
.RS 4
htpasswd \&.htpasswd berta
.fi
.RE
.PP
To remove a user:
.PP
.nf
.RS 4
htpasswd -D \&.htpasswd berta
.fi
.RE
.PP
Modify your site configuration and protect the "/edit/", "/save/", "/add/",
"/append/", "/upload/" and "/drop/" URLs with a password by adding the following
to your "<VirtualHost *:443>" section:
.PP
.nf
.RS 4
<LocationMatch "^/(edit|save|add|append|upload|drop)/">
  AuthType Basic
  AuthName "Password Required"
  AuthUserFile /home/oddmu/\&.htpasswd
  Require valid-user
</LocationMatch>
.fi
.RE
.PP
.SS Serve static files
.PP
If you want to serve static files as well, add a document root to your webserver
configuration.\& In this case, the document root is the directory where all the
data files are.\& Apache will not serve files such as ".\&htpasswd".\&
.PP
.nf
.RS 4
DocumentRoot /home/oddmu
<Directory /home/oddmu>
    Require all granted
</Directory>
.fi
.RE
.PP
Make sure that none of the subdirectories look like the wiki paths "/view/",
"/diff/", "/edit/", "/save/", "/add/", "/append/", "/upload/", "/drop/" or
"/search/".\& For example, create a file called "robots.\&txt" containing the
following, telling all robots that they'\&re not welcome.\&
.PP
.nf
.RS 4
User-agent: *
Disallow: /
.fi
.RE
.PP
You site now serves "/robots.\&txt" without interfering with the wiki, and without
needing a wiki page.\&
.PP
.SS Different logins for different access rights
.PP
What if you have a site with various subdirectories and each subdirectory is for
a different group of friends?\& You can set this up using your webserver.\& One way
to do this is to require specific usernames (which must have a password in the
password file mentioned above.\&
.PP
This requires a valid login by the user "alex" or "berta":
.PP
.nf
.RS 4
<LocationMatch "^/(edit|save|add|append|upload|drop)/intetebi/">
  Require user alex berta
</LocationMatch>
.fi
.RE
.PP
.SS Private wikis
.PP
Based on the above, you can prevent people from \fIreading\fR the wiki.\& The
"LocationMatch" must cover all the URLs in order to protect everything.\&
.PP
.nf
.RS 4
<Location />
  AuthType Basic
  AuthName "Password Required"
  AuthUserFile /home/oddmu/\&.htpasswd
  Require valid-user
</Location>
.fi
.RE
.PP
.SS Virtual hosting
.PP
Virtual hosting in this context means that the program serves two different
sites for two different domains from the same machine.\& Oddmu doesn'\&t support
that, but your webserver does.\& Therefore, start an Oddmu instance for every
domain name, each listening on a different port.\& Then set up your web server
such that ever domain acts as a reverse proxy to a different Oddmu instance.\&
.PP
.SH SEE ALSO
.PP
\fIoddmu\fR(1)
.PP
"Apache Core Features".\&
https://httpd.\&apache.\&org/docs/current/mod/core.\&html
.PP
"Apache: Authentication and Authorization".\&
https://httpd.\&apache.\&org/docs/current/howto/auth.\&html
.PP
"Apache Module mod_proxy".\&
https://httpd.\&apache.\&org/docs/current/mod/mod_proxy.\&html
.PP
"Robot exclusion standard" on Wikipedia.\&
https://en.\&wikipedia.\&org/wiki/Robot_exclusion_standard
.PP
.SH AUTHORS
.PP
Maintained by Alex Schroeder <alex@gnu.\&org>.\&
