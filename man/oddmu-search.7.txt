ODDMU-SEARCH(7)

# NAME

oddmu-search - understanding the Oddmu search engine

# SYNOPSIS

*oddmu search* _terms_...

# DESCRIPTION

The wiki keeps an index of all the hash tags and page titles in
memory. Using hashtags and predicates in your queries speeds them up
because fewer files are opened.

A hashtag starts with a number sign ("#") and contains numbers,
letters, and the underscore ("\_").

Example: #old_school random encounter

The title predicate filters for pages where the term is contained in
the page title.

Example: title:geo title:cache z√ºrich

The blog predicate filters for pages where the page name begins with
an ISO date like "2023-09-26" if true, or doesn't begin with an ISO
date if false.

Example: blog:false fountain

The sorting of all the pages does not depend on the number of matches
or any kind of score because computing the score is expensive as this
requires the page to be loaded from disk. Therefore, results are
sorted by title:

- If the page title contains the query string, it gets sorted first.
- If the page name starts with a number, it is sorted descending.
- All other pages follow, sorted ascending.

The effect is that first, the pages with matches in the page title are
shown, and then all the others. Within these two groups, the most
recent blog posts are shown first. This assumes that blog pages start
with an ISO date like "2023-09-16".

The score and highlighting of snippets is used to help visitors decide
which links to click.

Each document found is scored. Each of the following increases the
score by one point:

- the entire phrase matches
- a word matches
- a word matches at the beginning of a word
- a word matches at the end of a word
- a word matches as a whole word

A document with content "This is a test" when searched with the phrase
"this test" therefore gets a score of 8: the entire phrase does not
match but each word gets four points.

# SEE ALSO

_oddmu_(1), _oddmu-search_(1)

# AUTHORS

Maintained by Alex Schroeder <alex@gnu.org>.
