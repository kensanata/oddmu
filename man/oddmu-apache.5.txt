ODDMU-APACHE(5)

# NAME

oddmu-apache - how to setup Apache as a reverse proxy for Oddmu

## DESCRIPTION

The oddmu program serves the current working directory as a wiki on port 8080.
This is an unpriviledged port so an ordinary use account can do this.

The best way to protect the wiki against vandalism and spam is to use a regular
web server as reverse proxy. This page explains how to setup Apache on Debian to
do this.

## CONFIGURATION

HTTPS is not part of the wiki. You probably want to configure this in your
webserver. I guess you could use stunnel, too. If you're using Apache, you can
use "mod_md" to manage your domain.

In the example below, the site is configured in a file called
"/etc/apache2/sites-available/500-transjovian.conf" and a link poins there from
"/etc/apache2/sites-enabled". Create this link using _a2ensite_(1).

```
MDomain transjovian.org
MDCertificateAgreement accepted

<VirtualHost *:80>
    ServerName transjovian.org
    RewriteEngine on
    RewriteRule ^/(.*) https://%{HTTP_HOST}/$1 [redirect]
</VirtualHost>
<VirtualHost *:443>
    ServerAdmin alex@alexschroeder.ch
    ServerName transjovian.org
    SSLEngine on
    ProxyPassMatch "^/((view|edit|save|add|append|upload|drop|search)/(.*))?$" "http://localhost:8080/$1"
</VirtualHost>
```

First, it manages the domain, getting the necessary certificates. It redirects
regular HTTP traffic from port 80 to port 443. It turns on the SSL engine for
port 443. It proxies the requests for the wiki to port 8080.

Thus, this is what happens:

* The user tells the browser to visit `transjovian.org`
* The browser sends a request for `http://transjovian.org` (on port 80)
* Apache redirects this to `https://transjovian.org/` by default (now on port 443)
* This is proxied to `http://transjovian.org:8080/` (no encryption, on port 8080)

Restart the server, gracefully:

```
apachectl graceful
```

To serve both HTTP and HTTPS, don't redirect from the first virtual host to the
second â€“ instead just proxy to the wiki like you did for the second virtual
host: use a copy of the "ProxyPassMatch" directive instead of "RewriteEngine on"
and "RewriteRule".

## Access

Access control is not part of the wiki. By default, the wiki is editable by all.
This is most likely not what you want unless you're running it stand-alone,
unconnected to the Internet.

Create a new password file called ".htpasswd" and add the user "alex":

```
cd /home/oddmu
htpasswd -c .htpasswd alex
```

To add more users, don't use the "-c" option or you will overwrite it!

To add another user:

```
htpasswd .htpasswd berta
```

To remove a user:

```
htpasswd -D .htpasswd berta
```

Modify your site configuration and protect the "/edit/", "/save/", "/add/",
"/append/", "/upload/" and "/drop/" URLs with a password by adding the following
to your "<VirtualHost \*:443>" section:

```
<LocationMatch "^/(edit|save|add|append|upload|drop)/">
  AuthType Basic
  AuthName "Password Required"
  AuthUserFile /home/oddmu/.htpasswd
  Require valid-user
</LocationMatch>
```

## Serve static files

If you want to serve static files as well, add a document root to your webserver
configuration. In this case, the document root is the directory where all the
data files are. Apache will not serve files such as ".htpasswd".

```
DocumentRoot /home/oddmu
<Directory /home/oddmu>
    Require all granted
</Directory>
```

Make sure that none of the subdirectories look like the wiki paths "/view/",
"/diff/", "/edit/", "/save/", "/add/", "/append/", "/upload/", "/drop/" or
"/search/". For example, create a file called "robots.txt" containing the
following, telling all robots that they're not welcome.

```
User-agent: *
Disallow: /
```

You site now serves "/robots.txt" without interfering with the wiki, and without
needing a wiki page.

## Different logins for different access rights

What if you have a site with various subdirectories and each subdirectory is for
a different group of friends? You can set this up using your webserver. One way
to do this is to require specific usernames (which must have a password in the
password file mentioned above.

This requires a valid login by the user "alex" or "berta":

```
<LocationMatch "^/(edit|save|add|append|upload|drop)/intetebi/">
  Require user alex berta
</LocationMatch>
```

## Private wikis

Based on the above, you can prevent people from _reading_ the wiki. The
"LocationMatch" must cover all the URLs in order to protect everything.

```
<Location />
  AuthType Basic
  AuthName "Password Required"
  AuthUserFile /home/oddmu/.htpasswd
  Require valid-user
</Location>
```

## Virtual hosting

Virtual hosting in this context means that the program serves two different
sites for two different domains from the same machine. Oddmu doesn't support
that, but your webserver does. Therefore, start an Oddmu instance for every
domain name, each listening on a different port. Then set up your web server
such that ever domain acts as a reverse proxy to a different Oddmu instance.

# SEE ALSO

_oddmu_(1)

"Apache Core Features".
https://httpd.apache.org/docs/current/mod/core.html

"Apache: Authentication and Authorization".
https://httpd.apache.org/docs/current/howto/auth.html

"Apache Module mod_proxy".
https://httpd.apache.org/docs/current/mod/mod_proxy.html

"Robot exclusion standard" on Wikipedia.
https://en.wikipedia.org/wiki/Robot_exclusion_standard

# AUTHORS

Maintained by Alex Schroeder <alex@gnu.org>.
